from abc import ABC
from abc import abstractmethod
import os
os.system('cls')

class Conta(ABC):
    def __init__(self) -> None:
        super().__init__()
        self._agencia = None
        self._num_conta = None
        self._saldo = 0

    def depositar(self,dinheiro):
        print(f'{dinheiro} mangos foram adicionados na sua conta com sucesso')
        self._saldo += dinheiro
        print(f'Saldo atual: {self._saldo}')

    @abstractmethod
    def sacar(): ...

    @property
    def agencia(self):
        return self._agencia
    @agencia.setter
    def agencia(self, agencia):
        self._agencia = agencia
    
    @property
    def num_conta(self):
        return self._num_conta
    @num_conta.setter
    def num_conta(self, num_conta):
        self._num_conta = num_conta
    
    @property
    def saldo(self):
        return self._saldo
    @saldo.setter
    def saldo(self, saldo):
        self._saldo = saldo

class ContaPoupanca(Conta):
    def __init__(self) -> None:
        super().__init__()

    def sacar(self,quantia):
        if quantia > self._saldo:
            print('Você está tentando sacar mais dinehiro do que tem na conta poupança')
            return False
        print(f'{quantia} pratas foram sacadas com sucesso da sua conta')
        self._saldo -= quantia
        print(f'Saldo atual: {self._saldo}')
    
class ContaCorrente(Conta):
    def __init__(self) -> None:
        super().__init__()

    def sacar(self,quantia):
        print(f'{quantia} mangos foram sacadas com sucesso da sua conta')
        self._saldo -= quantia
        print(f'Saldo atual: {self._saldo}')
        

class Pessoa(ABC):
    def __init__(self) -> None:
        super().__init__()
        self._nome = None
        self._idade = None

    @property
    def nome(self):
        return self._nome
    @nome.setter
    def nome(self, nome):
        self._nome = nome

    @property
    def idade(self):
        return self._idade
    @idade.setter
    def idade(self, idade):
        self._idade = idade

class Cliente(Pessoa):
    def __init__(self) -> None:
        super().__init__()
        self._conta = None

    @property
    def conta(self):
        return self._conta
    @conta.setter
    def conta(self, conta : Conta):
        if self._idade < 18:
            raise ValueError('Esse cliente não tem idade de ter uma conta no banco')
        self._conta = conta

class Banco:
    def __init__(self) -> None:
        self._clientes = []
        self._contas = []
        self._agencia = None

    def ganhar_cliente(self,cliente : Cliente):
        print(f'{cliente.nome} foi adicionado a lista de clientes com sucesso')
        self._clientes.append(cliente)

    def ganhar_conta(self,conta : Conta):
        print(f'{conta.num_conta} foi adicionado a lista de contas com sucesso')
        self._contas.append(conta)

    def listar_clientes(self):
        for cliente in self._clientes:
            print(cliente.nome)

    def listar_contas(self):
        for conta in self._contas:
            print(conta.num_conta)

    @property
    def agencia(self):
        return self._agencia
    @agencia.setter
    def agencia(self, agencia):
        self._agencia = agencia

    def depositar(self,cliente : Cliente, conta : ContaPoupanca | ContaCorrente,dinheiro : int):
        if conta not in self._contas or cliente not in self._clientes or conta.agencia != self.agencia or cliente.conta is not conta:
            raise NotImplementedError('O cliente ou a conta não pertencem a esse banco')
        cliente.conta.depositar(dinheiro)

    def sacar(self,cliente : Cliente, conta : ContaPoupanca | ContaCorrente,dinheiro : int):
        if conta not in self._contas or cliente not in self._clientes or conta.agencia != self.agencia or cliente.conta is not conta:
            raise NotImplementedError('O cliente não pertence ao banco ou não possui essa conta ou a conta não pertence a esse banco')
        cliente.conta.sacar(dinheiro)


Bradesco = Banco()
Bradesco.agencia = 1234

Lucca = Cliente()
Lucca.nome = 'Lucca'
Lucca.idade = 18

corrente = ContaCorrente()
poupanca = ContaPoupanca()
corrente.agencia = 1234
poupanca.agencia = 1234
corrente.num_conta = 4321
poupanca.num_conta = 8765
corrente.saldo = 0
poupanca.saldo = 0

Lucca.conta = corrente

Bradesco.ganhar_cliente(Lucca)
Bradesco.ganhar_conta(poupanca)

Bradesco.depositar(Lucca,poupanca,1000)
Bradesco.sacar(Lucca,poupanca,1001)
